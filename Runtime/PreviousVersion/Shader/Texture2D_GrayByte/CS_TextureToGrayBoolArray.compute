// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> Given;
//RWStructuredBuffer<int> Index1D;
RWStructuredBuffer<int> TextureAs255;
RWStructuredBuffer<int> TextureAs255Gray;
RWStructuredBuffer<int> TextureAsIntBool;
RWTexture2D<float4> ResultGray;
RWTexture2D<float4> ResultBlackWhite;

//Should be remove when I will understand how not to use 16x16 thread on 256 but 8x8 fo Nxn
//RWTexture2D<float4> DebugReturn;
int Width;
float WhitePercent;


[numthreads(16,16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int indexInner = (id.x + Width * id.y) * 4;
    int index = (id.x + Width * id.y);

    TextureAs255[indexInner] = Given[id.xy].x * 255.0;
    TextureAs255[indexInner + 1] = Given[id.xy].y * 255.0;
    TextureAs255[indexInner + 2] = Given[id.xy].z * 255.0;
    TextureAs255[indexInner + 3] = Given[id.xy].w * 255.0;
    float gray = (Given[id.xy].x * 0.3333) + (Given[id.xy].y * 0.3333) + (Given[id.xy].z * 0.3333);
    //float gray = (Given[id.xy].x * 0.3) + (Given[id.xy].y * 0.3) + (Given[id.xy].z * 0.3);
    TextureAs255Gray[index] = gray*255 ;
    ResultGray[id.xy] = float4(gray, gray, gray, 1);
    
     
        int byteIndex = (int)(index / 32.0);
        int bitIndex = index % 32;
        
        if (gray> WhitePercent)
            TextureAsIntBool[bitIndex] |= (1 << bitIndex);
        else 
            TextureAsIntBool[bitIndex] &= ~(1 << bitIndex);

        float v = gray > WhitePercent ? 1 : 0;
        ResultBlackWhite[id.xy] = float4(v, v, v, 1);
}


/* In C#

public static void Set(ref int theInt, in int bitPosition, in bool value)
    {
        if (value) theInt |= (1 << bitPosition);
        else theInt &= ~(1 << bitPosition);

    }
        BitArray bitIntArray = new BitArray(new bool[32]);
        for (int i = 0; i < m_isWhite.Length; i++)
        {
            int byteIndex = (int)(i / 32f);
            int bitIndex = i % 32;
            bitIntArray.Set(bitIndex, m_isWhite[i] == 1);

            if (bitIndex == 31)
                m_isWhiteOn32BitsInt[byteIndex] = ConvertToInt(bitIntArray);
        }

        // INT ARRAY
        Color[] pixelWhite32 = new Color[m_isWhiteOn32BitsInt.Length * 32];
        for (int i = 0; i < m_isWhiteOn32BitsInt.Length; i++)
        {
            for (int j = 0; j < 32; j++)
            {
                pixelWhite32[(i * 32) + j] = GetIntValueAsColor(in m_isWhiteOn32BitsInt[i], in j);
            }
        }
        m_texture2DBits32 = new Texture2D(m_texture.width, m_texture.height);
        m_texture2DBits32.SetPixels(pixelWhite32);
        m_texture2DBits32.Apply();
        
        */